name: CI/CD
on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-southeast-2                   
  ECR_REPOSITORY: uq_degree_planner           
  ECS_SERVICE: uq-degree-planner-service                 
  ECS_CLUSTER: uq-degree-planner-cluster                 
  ECS_TASK_DEFINITION: task.json 
  CONTAINER_NAME: uq_degree_planner           

jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install modules
        working-directory: frontend
        run: npm ci

      - name: Linter
        working-directory: frontend
        run: npx eslint . --ext .tsx
            
      - name: Jest tests
        working-directory: frontend
        run: npm run test
 
      - name: Set up Java 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Junit tests
        working-directory: backend
        run: mvn clean test
        
  continuous-deployment:
    runs-on: ubuntu-latest
    needs: [continuous-integration]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Public ECR auth
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: public.ecr.aws/r8i2f5k8
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Add secrets to Task Definition
        run: |
          sed -i "s|<url_secret>|a/b/c|g" task.json 
          sed -i "s|<username_secret>|$USERNAME_SECRET|g" task.json
          sed -i "s|<password_secret>|$PASSWORD_SECRET|g" task.json 
        env:
          URL_SECRET: ${{ secrets.URL_SECRET }}
          USERNAME_SECRET: ${{ secrets.USERNAME_SECRET }}
          PASSWORD_SECRET: ${{ secrets.PASSWORD_SECRET }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true